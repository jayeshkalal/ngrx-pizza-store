{"version":3,"file":"main.js","mappings":"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","sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/meta-reducers/index.ts","./src/app/pizzeria/car-repairs-list.service.ts","./src/app/pizzeria/car-repairs.module.ts","./src/app/pizzeria/dashboard-statistic/dashboard-statistic.component.ts","./src/app/pizzeria/dashboard-statistic/dashboard-statistic.component.html","./src/app/pizzeria/fake-data.ts","./src/app/pizzeria/landing-dashboard/landing-dashboard.component.ts","./src/app/pizzeria/landing-dashboard/landing-dashboard.component.html","./src/app/pizzeria/list-column/list-column.component.ts","./src/app/pizzeria/list-column/list-column.component.html","./src/app/pizzeria/orders-list/orders-list.component.ts","./src/app/pizzeria/orders-list/orders-list.component.html","./src/app/pizzeria/store/actions/car-repairs-list.actions.ts","./src/app/pizzeria/store/effects/car-repairs-list.effects.ts","./src/app/pizzeria/store/reducers/car-repairs-list.reducer.ts","./src/app/pizzeria/store/reducers/index.ts","./src/app/pizzeria/store/resolvers/car-repairs.resolve.ts","./src/app/pizzeria/store/selectors/car-repairs.selectors.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LandingDashboardComponent } from './pizzeria/landing-dashboard/landing-dashboard.component';\r\nimport { OrdersListComponent } from './pizzeria/orders-list/orders-list.component';\r\nimport { CarRepairsResolve } from './pizzeria/store/resolvers/car-repairs.resolve';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: 'landing',\r\n    component: LandingDashboardComponent,\r\n    resolve: {carRepairs: CarRepairsResolve},\r\n  },\r\n  {\r\n    path: 'landing/list',\r\n    component: OrdersListComponent,\r\n    resolve: {carRepairs: CarRepairsResolve},\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'landing',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { fetchCarRepairsList } from './pizzeria/store/actions/car-repairs-list.actions';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'service-station-ngrx';\r\n  constructor(private store: Store) {\r\n    //this.store.dispatch(fetchCarRepairsList());\r\n\r\n}\r\n}\r\n","<mat-toolbar color=\"accent\">\r\n  <mat-icon>build</mat-icon>\r\n  <span>Service Station</span>\r\n\r\n  <a mat-button routerLink=\"/car-repairs/dashboard\">Dashboard</a>\r\n  <a mat-button routerLink=\"/car-repairs/list\">List</a>\r\n</mat-toolbar>\r\n<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { reducers, metaReducers } from './meta-reducers';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment';\r\nimport { PizzeriaModule } from './pizzeria/car-repairs.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    EffectsModule.forRoot([]),\r\n    StoreModule.forRoot(reducers, { metaReducers }),\r\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\r\n    PizzeriaModule,\r\n    BrowserAnimationsModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MetaReducer\r\n} from '@ngrx/store';\r\nimport { environment } from '../../environments/environment';\r\n\r\n\r\nexport interface State {\r\n\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n\r\n};\r\n\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Observable, timer } from 'rxjs';\r\nimport { CarRepair } from './model/car-repair.model';\r\nimport { mapTo } from 'rxjs/operators';\r\nimport { FAKE_CAR_REPAIRS } from './car-repairs.module';\r\n\r\nexport const repairsLoadingTime = 1000;\r\nexport const advanceRepairTime = 200;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CarRepairsListService {\r\n\r\n  constructor(@Inject(FAKE_CAR_REPAIRS) private fakeCarRepairs: CarRepair[]) {\r\n  }\r\n\r\n  public fetchCarRepairs(): Observable<CarRepair[]> {\r\n    return timer(repairsLoadingTime).pipe(\r\n      mapTo(this.fakeCarRepairs),\r\n    );\r\n  }\r\n\r\n  public advanceCarRepair(carRepair: CarRepair): Observable<CarRepair> {\r\n    return timer(advanceRepairTime).pipe(\r\n      mapTo({\r\n        ...carRepair,\r\n        state: carRepair.state === 'New' ? 'In progress' : 'Done',\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromCarRepairs from './store/reducers';\r\nimport { OrdersListComponent } from './orders-list/orders-list.component';\r\nimport { LandingDashboardComponent } from './landing-dashboard/landing-dashboard.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { DashboardStatisticComponent } from './dashboard-statistic/dashboard-statistic.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ListColumnComponent } from './list-column/list-column.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { allRepairs } from './fake-data';\r\nimport { CarRepairsListEffects } from './store/effects/car-repairs-list.effects';\r\n\r\nexport const FAKE_CAR_REPAIRS = new InjectionToken('Fake data');\r\n\r\n@NgModule({\r\n  declarations: [\r\n    OrdersListComponent,\r\n    LandingDashboardComponent,\r\n    DashboardStatisticComponent,\r\n    ListColumnComponent,\r\n  ],\r\n  exports: [\r\n    LandingDashboardComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    StoreModule.forFeature(\r\n      fromCarRepairs.carRepairsFeatureKey,\r\n      fromCarRepairs.reducers,\r\n    ),\r\n    EffectsModule.forFeature([\r\n      CarRepairsListEffects,\r\n    ]),\r\n    RouterModule,\r\n    MatProgressSpinnerModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: FAKE_CAR_REPAIRS,\r\n      useValue: allRepairs,\r\n    },\r\n  ],\r\n})\r\nexport class PizzeriaModule {\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-statistic',\r\n  templateUrl: './dashboard-statistic.component.html',\r\n  styleUrls: ['./dashboard-statistic.component.css'],\r\n})\r\nexport class DashboardStatisticComponent {\r\n  @Input() public value: number | null = null;\r\n  @Input() public label: string = '';\r\n}\r\n","<div class=\"container\">\r\n  <h2 class=\"mat-title\">{{value}}</h2>\r\n  <h3 class=\"mat-subheading-2\">{{label}}</h3>\r\n</div>\r\n","import { CarRepair } from './model/car-repair.model';\r\n\r\nexport const newRepairs: CarRepair[] = [\r\n  {\r\n    jobNumber: '1',\r\n    registrationPlate: 'AD 114315',\r\n    car: 'Toyota Camry',\r\n    jobType: 'oil change',\r\n    needsParts: false,\r\n    state: 'New',\r\n  },\r\n  {\r\n    jobNumber: '2',\r\n    registrationPlate: 'GE 161345',\r\n    car: 'BMW z5',\r\n    jobType: 'fix breaks',\r\n    needsParts: true,\r\n    state: 'New',\r\n  },\r\n];\r\n\r\nexport const inProgressRepairs: CarRepair[] = [\r\n  {\r\n    jobNumber: '3',\r\n    registrationPlate: 'ER 13005',\r\n    car: 'Opel Zafira',\r\n    jobType: 'replace windshield',\r\n    needsParts: true,\r\n    state: 'In progress',\r\n  },\r\n];\r\n\r\nexport const doneRepairs: CarRepair[] = [\r\n  {\r\n    jobNumber: '4',\r\n    registrationPlate: 'XF 662341',\r\n    car: 'Opel Astra',\r\n    jobType: 'engine diagnosis',\r\n    needsParts: false,\r\n    state: 'Done',\r\n  },\r\n];\r\n\r\nexport const allRepairs: CarRepair[] = [\r\n  ...newRepairs,\r\n  ...doneRepairs,\r\n  ...inProgressRepairs,\r\n];\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { EntityState } from '@ngrx/entity';\r\nimport { Store } from '@ngrx/store';\r\nimport { CarRepair } from '../model/car-repair.model';\r\nimport { selectAllCarRepairs, selectTotalOfDoneCarRepairs, selectTotalOfInProgressCarRepairs, selectTotalOfNewCarRepairs } from '../store/selectors/car-repairs.selectors';\r\n\r\n@Component({\r\n  selector: 'landing-dashboard',\r\n  templateUrl: './landing-dashboard.component.html',\r\n  styleUrls: ['./landing-dashboard.component.css'],\r\n})\r\nexport class LandingDashboardComponent implements OnInit{\r\n  newCars: number = 0;\r\n  inProgCars: number = 0;\r\n  doneCars: number = 0;\r\n  fetched : boolean = false;\r\n  constructor(private store: Store<EntityState<CarRepair>>) {\r\n    // if(!this.fetched)\r\n       //this.store.dispatch(fetchCarRepairsList());\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.store.select(selectAllCarRepairs).subscribe((_) => \r\n    {\r\n      this.fetched = _.length ? true : false;\r\n    });\r\n    this.store.select(selectTotalOfNewCarRepairs).subscribe((_) => \r\n    {\r\n      this.newCars = _;\r\n    });\r\n    this.store.select(selectTotalOfInProgressCarRepairs).subscribe((_) => \r\n    {\r\n      this.inProgCars = _;\r\n    });\r\n    this.store.select(selectTotalOfDoneCarRepairs).subscribe((_) => \r\n    {\r\n      this.doneCars = _;\r\n    });\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>Car Repairs Statistics</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <ng-container *ngIf=\"fetched\">\r\n      <app-dashboard-statistic\r\n        [label]=\"'To do'\" [value] =\"newCars\"></app-dashboard-statistic>\r\n      <app-dashboard-statistic\r\n        [label]=\"'In Progress'\" [value]=\"inProgCars\"></app-dashboard-statistic>\r\n      <app-dashboard-statistic\r\n        [label]=\"'Done'\" [value]=\"doneCars\"></app-dashboard-statistic>\r\n    </ng-container>\r\n    <mat-spinner *ngIf=\"!fetched\"></mat-spinner>\r\n  </mat-card-content>\r\n</mat-card>\r\n\r\n\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CarRepair } from '../model/car-repair.model';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-list-column',\r\n  templateUrl: './list-column.component.html',\r\n  styleUrls: ['./list-column.component.css'],\r\n})\r\nexport class ListColumnComponent {\r\n  @Input() public name: string = '';\r\n  @Input() public repairs: Observable<CarRepair[]> = of([]);\r\n  @Input() public canAdvance: boolean = false;\r\n  @Output() public advanceRepair: EventEmitter<CarRepair> = new EventEmitter<CarRepair>();\r\n\r\n  public advance(repair: CarRepair) {\r\n    this.advanceRepair.emit(repair);\r\n  }\r\n}\r\n","<div class=\"column\">\r\n  <h2>{{name}}</h2>\r\n  <mat-card *ngFor=\"let repair of repairs | async\">\r\n    <mat-card-header>\r\n      <mat-card-title>{{repair.jobType}}</mat-card-title>\r\n      <mat-card-subtitle>{{repair.registrationPlate}}</mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <div class=\"icon-text-container\">\r\n        <mat-icon>directions_car</mat-icon>\r\n        <span>{{repair.car}}</span>\r\n      </div>\r\n      <div class=\"icon-text-container\"\r\n           *ngIf=\"repair.needsParts\">\r\n        <mat-icon>build</mat-icon>\r\n        <span>Needs parts</span>\r\n      </div>\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions [align]=\"'end'\"\r\n                      *ngIf=\"canAdvance\">\r\n      <button mat-mini-fab\r\n              (click)=\"advance(repair)\">\r\n        <mat-icon>east</mat-icon>\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { EntityState } from '@ngrx/entity';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { advanceCarRepair } from '../store/actions/car-repairs-list.actions';\r\nimport { CarRepair } from '../model/car-repair.model';\r\nimport { selectAllCarRepairs, selectDoneRepairs, selectInProgressRepairs, selectNewRepairs } from '../store/selectors/car-repairs.selectors';\r\n\r\n@Component({\r\n  selector: 'app-orders-list',\r\n  templateUrl: './orders-list.component.html',\r\n  styleUrls: ['./orders-list.component.css'],\r\n})\r\nexport class OrdersListComponent implements OnInit {\r\n  fetched : boolean = false;\r\n  totalCars: CarRepair[]=[];\r\n  newCars: Observable<CarRepair[]> = of([]);\r\n  inProgCars: Observable<CarRepair[]> = of([]);\r\n  doneCars: Observable<CarRepair[]> = of([]);\r\n  constructor(private store: Store<EntityState<CarRepair>>) {\r\n    //this.store.dispatch(fetchCarRepairsList());\r\n\r\n  }\r\n  ngOnInit(): void {\r\n    this.store.select(selectAllCarRepairs).subscribe((_) => \r\n    {\r\n      this.totalCars = _;\r\n      this.fetched = this.totalCars.length ?  true : false;\r\n    });\r\n    this.newCars = this.store.select(selectNewRepairs);\r\n    this.inProgCars = this.store.select(selectInProgressRepairs);\r\n    this.doneCars = this.store.select(selectDoneRepairs);\r\n    // this.store.select(selectNewRepairs).subscribe((_) => \r\n    // {\r\n    //   this.newCars = _;\r\n    // });\r\n    // this.store.select(selectInProgressRepairs).subscribe((_) => \r\n    // {\r\n    //   this.inProgCars = _;\r\n    // });\r\n    // this.store.select(selectDoneRepairs).subscribe((_) => \r\n    // {\r\n    //   this.doneCars = _;\r\n    // });\r\n\r\n  }\r\n  public advanceCarRepair(carRepair: CarRepair) {\r\n    this.store.dispatch(advanceCarRepair({carRepair: carRepair}));\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"board\" *ngIf=\"fetched\">\r\n    <app-list-column name=\"New\"\r\n                     [canAdvance]=\"true\"\r\n                     [repairs] = \"newCars\"\r\n                     (advanceRepair)=\"advanceCarRepair($event)\"></app-list-column>\r\n    <app-list-column name=\"In Progress\"\r\n                     [canAdvance]=\"true\"\r\n                     [repairs] = \"inProgCars\"\r\n                     (advanceRepair)=\"advanceCarRepair($event)\"></app-list-column>\r\n    <app-list-column name=\"Done\"\r\n                     [canAdvance]=\"false\"\r\n                     [repairs] = \"doneCars\"\r\n                     (advanceRepair)=\"advanceCarRepair($event)\"></app-list-column>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"!fetched\"></mat-spinner>\r\n</div>\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { CarRepair } from '../../model/car-repair.model';\r\n\r\nexport const fetchCarRepairsList = createAction(\r\n  '[CarRepairsList] Fetch Car Repairs List',\r\n);\r\n\r\nexport const fetchCarRepairsListSuccess = createAction(\r\n  '[CarRepairsList] Fetch Car Repairs List Success',\r\n  props<{ carRepair: CarRepair[] }>(),\r\n);\r\n\r\nexport const fetchCarRepairsListFail = createAction(\r\n  '[CarRepairsList] Fetch Car Repairs List Fail',\r\n);\r\n\r\nexport const advanceCarRepair = createAction(\r\n  '[CarRepairsList] Advance Car Repair',\r\n  props<{ carRepair: CarRepair }>(),\r\n);\r\n\r\nexport const advanceCarRepairSuccess = createAction(\r\n  '[CarRepairsList] Advance Car Repair Success',\r\n  props<{ carRepair: CarRepair }>(),\r\n);\r\n\r\nexport const advanceCarRepairFail = createAction(\r\n  '[CarRepairsList] Advance Car Repair Fail',\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { State } from 'src/app/meta-reducers';\r\nimport { CarRepairsListService } from '../../car-repairs-list.service';\r\nimport * as carRepairsListActions from '../actions/car-repairs-list.actions';\r\n\r\n@Injectable()\r\nexport class CarRepairsListEffects {\r\n  public fetchCarRepairsList = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(carRepairsListActions.fetchCarRepairsList),\r\n      switchMap(() => this.carRepairsListService.fetchCarRepairs().pipe(\r\n        map((_) => \r\n        carRepairsListActions.fetchCarRepairsListSuccess({carRepair : _}),\r\n        catchError((err) => of(carRepairsListActions.fetchCarRepairsListFail()))\r\n        )\r\n      ))\r\n    ),\r\n  );\r\n\r\n  public advanceCarRepair = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(carRepairsListActions.advanceCarRepair),\r\n      switchMap((data) => this.carRepairsListService.advanceCarRepair(data.carRepair).pipe(\r\n        map((_) => \r\n        carRepairsListActions.advanceCarRepairSuccess({carRepair : _}),\r\n        catchError((err) => of(carRepairsListActions.advanceCarRepairFail()))\r\n        )\r\n      ))\r\n    ),\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private carRepairsListService: CarRepairsListService,\r\n    private store: Store<State>\r\n  ) {\r\n  }\r\n}\r\n","import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\r\nimport { createReducer, on } from '@ngrx/store';\r\nimport { CarRepair } from '../../model/car-repair.model';\r\nimport * as carRepairsListActions from '../actions/car-repairs-list.actions';\r\n\r\nexport const carRepairsListFeatureKey = 'carRepairsList';\r\n\r\nexport interface State extends EntityState<CarRepair> {\r\n  isFetching: boolean;\r\n  hasError: boolean;\r\n  hasFetched: boolean;\r\n}\r\n\r\nexport const adapter : EntityAdapter<CarRepair> = createEntityAdapter<CarRepair>({\r\n  selectId : (_) => _.jobNumber\r\n});\r\n\r\nexport const initialState: State = adapter.getInitialState({\r\n  isFetching: false,\r\n  hasError: false,\r\n  hasFetched: false,\r\n});\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n  // on(carRepairsListActions.fetchCarRepairsListSuccess, (state, cars) => adapter.addMany(cars.carRepair, state)),\r\n  // on(carRepairsListActions.advanceCarRepairSuccess, (state, action) => {\r\n  //   return adapter.updateOne({id : action.carRepair.jobNumber, changes: action.carRepair}, state)\r\n  // }),\r\n\r\n  on(carRepairsListActions.fetchCarRepairsListSuccess, (state, cars) => adapter.addMany(cars.carRepair, \r\n    {...state, hasFetched : true, hasError : false})),\r\n\r\n    on(carRepairsListActions.advanceCarRepairSuccess, (state, action) => {\r\n      return adapter.updateOne({id : action.carRepair.jobNumber, changes: action.carRepair}, \r\n        {...state, hasFetched : true, hasError : false})}),\r\n       \r\n       on(carRepairsListActions.fetchCarRepairsListFail, (state, action) => {\r\n          return {\r\n            ...state,\r\n            hasError : true,\r\n            hasFetched : false\r\n          }\r\n        }),\r\n        on(carRepairsListActions.advanceCarRepairFail, (state, action) => {\r\n          return {\r\n            ...state,\r\n            hasError : true,\r\n            hasFetched : false\r\n          }\r\n        })\r\n);\r\n\r\n","import {\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MetaReducer\r\n} from '@ngrx/store';\r\nimport * as fromCarRepairsList from './car-repairs-list.reducer';\r\n\r\nexport const carRepairsFeatureKey = 'carRepairs';\r\n\r\nexport interface State {\r\n  [fromCarRepairsList.carRepairsListFeatureKey]: fromCarRepairsList.State;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n  [fromCarRepairsList.carRepairsListFeatureKey]: fromCarRepairsList.reducer,\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { filter, first, take, tap } from 'rxjs/operators';\r\nimport { fetchCarRepairsList } from '../actions/car-repairs-list.actions';\r\nimport { selectIsFetchingNeeded } from '../selectors/car-repairs.selectors';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CarRepairsResolve implements Resolve<any> {\r\n  constructor(private store: Store) {\r\n    //this.store.dispatch(fetchCarRepairsList());\r\n  }\r\n  // resolve(route: ActivatedRouteSnapshot) {\r\n  //   return this.store.pipe(\r\n  //     select(selectIsFetchingNeeded), \r\n  //     tap(data => {\r\n  //       if(!data)\r\n  //         this.store.dispatch(fetchCarRepairsList());\r\n  //   }),\r\n  //   filter(data => data),\r\n  //   first()\r\n  //   );\r\n  // }\r\n\r\n  resolve(route: ActivatedRouteSnapshot) {\r\n    return this.store.select(\r\n      selectIsFetchingNeeded).pipe(take(1)).subscribe((data) => {\r\n        if(data)\r\n          this.store.dispatch(fetchCarRepairsList());\r\n      });\r\n  }\r\n}\r\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport * as fromCarRepairs from '../reducers/index';\r\nimport * as fromCarRepairsList from '../reducers/car-repairs-list.reducer';\r\n\r\nexport const selectCarRepairsState = createFeatureSelector<fromCarRepairs.State>(\r\n  fromCarRepairs.carRepairsFeatureKey,\r\n);\r\n\r\nexport const selectCarRepairsListState = createSelector(\r\n  selectCarRepairsState,\r\n  state => state[fromCarRepairsList.carRepairsListFeatureKey],\r\n);\r\n\r\nexport const {\r\n  selectAll\r\n} = fromCarRepairsList.adapter.getSelectors();\r\n\r\nexport const selectAllCarRepairs = createSelector(\r\n  selectCarRepairsListState,\r\n  selectAll\r\n);\r\n\r\nexport const selectIsFetching = undefined; // TODO: implement\r\n\r\nexport const selectIsFetchingNeeded = createSelector(\r\n  selectCarRepairsListState,\r\n  (state) => {\r\n      return !state.hasFetched || state.hasError;\r\n  }\r\n);\r\n\r\nexport const selectNewRepairs = createSelector(\r\n  selectAllCarRepairs,\r\n  (data) => {\r\n    return data.filter(_ => _.state == \"New\");\r\n  }\r\n);\r\n\r\nexport const selectInProgressRepairs = createSelector(\r\n  selectAllCarRepairs,\r\n  (data) => {\r\n    return data.filter(_ => _.state == \"In progress\");\r\n  }\r\n); \r\n\r\nexport const selectDoneRepairs = createSelector(\r\n  selectAllCarRepairs,\r\n  (data) => {\r\n    return data.filter(_ => _.state == \"Done\");\r\n  }\r\n); \r\n\r\nexport const selectTotalOfNewCarRepairs = createSelector(\r\n  selectNewRepairs,\r\n  (data) => {\r\n    return data.length;\r\n  }\r\n); \r\n\r\nexport const selectTotalOfInProgressCarRepairs = createSelector(\r\n  selectInProgressRepairs,\r\n  (data) => {\r\n    return data.length;\r\n  }\r\n); \r\n\r\nexport const selectTotalOfDoneCarRepairs = createSelector(\r\n  selectDoneRepairs,\r\n  (data) => {\r\n    return data.length;\r\n  }\r\n); \r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":[],"sourceRoot":"webpack:///"}